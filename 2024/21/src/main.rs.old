use aoc_base::Point;
use lazy_static::lazy_static;
use pathfinding::directed::yen::yen;
use std::collections::HashMap;

mod solve;

lazy_static! {
    static ref numpad_pos: HashMap<char, Point> = HashMap::from([
        ('7', Point::new(0, 0)),
        ('8', Point::new(0, 1)),
        ('9', Point::new(0, 2)),
        ('4', Point::new(1, 0)),
        ('5', Point::new(1, 1)),
        ('6', Point::new(1, 2)),
        ('1', Point::new(2, 0)),
        ('2', Point::new(2, 1)),
        ('3', Point::new(2, 2)),
        ('0', Point::new(3, 1)),
        ('A', Point::new(3, 2)),
    ]);
    static ref keypad_pos: HashMap<char, Point> = HashMap::from([
        ('^', Point::new(0, 1)),
        ('A', Point::new(0, 2)),
        ('<', Point::new(1, 0)),
        ('v', Point::new(1, 1)),
        ('>', Point::new(1, 2)),
    ]);
}

fn main() {
    println!("{:?}", solve::solve(&aoc_base::read_input()));
    let codes = aoc_base::read_input()
        .lines()
        .map(|l| l.chars().collect::<Vec<char>>())
        .collect::<Vec<Vec<char>>>();

    let mut sequences: HashMap<Vec<char>, u64> = HashMap::new();

    for code in &codes {
        let sequence = input_code(code.clone(), 2);
        sequences.insert(code.clone(), sequence);
    }

    // 3402, 104330, 249346 (high), 247982, 255258, 279748
    println!(
        "Part 1: {}",
        sequences
            .iter()
            .map(|(code, seq)| {
                let code_complexity = code[0].to_digit(10).unwrap() as u64 * 100
                    + code[1].to_digit(10).unwrap() as u64 * 10
                    + code[2].to_digit(10).unwrap() as u64;
                println!("{code:?} {code_complexity} {}", seq);
                code_complexity * *seq
            })
            .sum::<u64>()
    );

    sequences.clear();

    for code in &codes {
        let sequence = input_code(code.clone(), 25);
        sequences.insert(code.clone(), sequence);
    }

    // 408240 (low), 256985399924663 (low), 73730732119059 (low)
    println!(
        "Part 2: {}",
        sequences
            .iter()
            .map(|(code, seq)| {
                let code_complexity = code[0].to_digit(10).unwrap() as u64 * 100
                    + code[1].to_digit(10).unwrap() as u64 * 10
                    + code[2].to_digit(10).unwrap() as u64;
                println!("{code:?} {code_complexity} {}", seq);
                code_complexity * *seq
            })
            .sum::<u64>()
    );
}

fn input_code(code: Vec<char>, nb_keypads: usize) -> u64 {
    let mut sequence = 0;
    let mut cache = HashMap::new();

    let mut robots_pos = vec![*keypad_pos.get(&'A').unwrap(); nb_keypads];
    robots_pos.insert(0, *numpad_pos.get(&'A').unwrap());

    for digit in code {
        println!("----- {digit}");
        sequence += move_robot(digit, &mut robots_pos, 0, nb_keypads, &mut cache);
        // println!("----- {digit} {robots_pos:?}");
    }

    sequence
}

fn move_robot(
    target: char,
    robots_pos: &mut Vec<Point>,
    robot_idx: usize,
    nb_keypads: usize,
    cache: &mut HashMap<(char, Point, usize), u64>,
) -> u64 {
    if robot_idx == nb_keypads + 1 {
        return 1;
    }

    let state = (target, robots_pos[robot_idx], robot_idx);

    if let Some(sequence) = cache.get(&state) {
        return *sequence;
    }

    let paths = yen(
        &(
            robots_pos[robot_idx],
            get_dir(
                robots_pos[robot_idx],
                if robot_idx == 0 {
                    numpad_pos[&target]
                } else {
                    keypad_pos[&target]
                },
            ),
        ),
        |(pos, dir): &(Point, char)| {
            let grid = if robot_idx == 0 {
                numpad_pos.clone()
            } else {
                keypad_pos.clone()
            };

            let all_pos = grid.values().copied().collect::<Vec<Point>>();
            let mut n = pos.get_4_neighbours(
                all_pos.iter().map(|p| p.r).max().unwrap() + 1,
                all_pos.iter().map(|p| p.c).max().unwrap() + 1,
            );
            n.retain(|p| all_pos.contains(p));
            n.into_iter()
                .map(|p| {
                    (
                        (p, get_dir(p, *pos)),
                        if *dir != get_dir(p, *pos) { 2 } else { 1 },
                    )
                })
                .collect::<Vec<((Point, char), u32)>>()
        },
        |(p, _)| {
            if robot_idx == 0 {
                numpad_pos[&target] == *p
            } else {
                keypad_pos[&target] == *p
            }
        },
        10,
    );

    // println!("{}", paths.len());

    let mut best_sequence = u64::MAX;

    for path in paths {
        let mut sequence = 0;

        let path = path.0;

        for path_i in 0..path.len() - 1 {
            let pos1 = path[path_i].0;
            let pos2 = path[path_i + 1].0;
            let dir = get_dir(pos1, pos2);

            robots_pos[robot_idx] = pos1;

            let part_seq = move_robot(dir, robots_pos, robot_idx + 1, nb_keypads, cache);

            sequence += part_seq;

            robots_pos[robot_idx] = pos2;
        }

        sequence += move_robot('A', robots_pos, robot_idx + 1, nb_keypads, cache);

        best_sequence = best_sequence.min(sequence);
    }

    cache.insert(state, best_sequence);

    best_sequence
}

fn get_dir(pos1: Point, pos2: Point) -> char {
    if pos1.r > pos2.r {
        match pos1.r - pos2.r {
            0 => {
                if pos1.c > pos2.c {
                    '<'
                } else {
                    '>'
                }
            }
            _ => '^',
        }
    } else {
        match pos2.r - pos1.r {
            0 => {
                if pos1.c > pos2.c {
                    '<'
                } else {
                    '>'
                }
            }
            _ => 'v',
        }
    }
}
